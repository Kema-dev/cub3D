R 800 800
NO ./textures/bookshelf.xpm
SO ./textures/cracked_stone_bricks.xpm
EA ./textures/purplestone.xpm
WE ./textures/piston_top.xpm
S ./textures/barrel.xpm
F 255,0,255
C 51,26,255

1111111111111111111111111111111111
1000000000010202020100000111110111
1000000000010000000100000000000001
10001010N0010202020111111100000001
1000101000010000000100000000000001
1000101000011100111111111110111111
12000000002000000001      101
10002000000000000021111111101
10000000000000002000000000001
10000020000000000021111111111
11111111111111111111


void	ft_move_fb(t_pars *values)
{
	if (values->data.front)
	{
		if (values->map[(int)(values->data.posx + values->data.dirx\
				* values->data.movespeed)][(int)(values->data.posy)] == '0')
			values->data.posx += values->data.dirx * values->data.movespeed;
		if (values->map[(int)(values->data.posx)][(int)(values->data.posy\
				+ values->data.diry * values->data.movespeed)] == '0')
			values->data.posy += values->data.diry * values->data.movespeed;
	}
	if (values->data.back)
	{
		if (values->map[(int)(values->data.posx - values->data.dirx\
				* values->data.movespeed)][(int)(values->data.posy)] == '0')
			values->data.posx -= values->data.dirx * values->data.movespeed;
		if (values->map[(int)(values->data.posx)][(int)(values->data.posy\
				- values->data.diry * values->data.movespeed)] == '0')
			values->data.posy -= values->data.diry * values->data.movespeed;
	}
}

void	ft_move_rl(t_pars *values)
{
	if (values->data.left)
	{
		if (values->map[(int)(values->data.posx + values->data.dirx\
				* values->data.movespeed)][(int)(values->data.posy)] == '0')
			values->data.posx -= values->data.diry * values->data.movespeed;
		if (values->map[(int)(values->data.posx)][(int)(values->data.posy\
				+ values->data.diry * values->data.movespeed)] == '0')
			values->data.posy += values->data.dirx * values->data.movespeed;
	}
	if (values->data.right)
	{
		if (values->map[(int)(values->data.posx - values->data.dirx\
				* values->data.movespeed)][(int)(values->data.posy)] == '0')
			values->data.posx += values->data.diry * values->data.movespeed;
		if (values->map[(int)(values->data.posx)][(int)(values->data.posy\
				- values->data.diry * values->data.movespeed)] == '0')
			values->data.posy -= values->data.dirx * values->data.movespeed;
	}
}

void	ft_rot_right(t_pars *values)
{
	double oldplanex;
	double olddirx;

	if (values->data.r_right)
	{
		olddirx = values->data.dirx;
		values->data.dirx = values->data.dirx * cos(-values->data.rotspeed)\
				- values->data.diry * sin(-values->data.rotspeed);
		values->data.diry = olddirx * sin(-values->data.rotspeed)\
				+ values->data.diry * cos(-values->data.rotspeed);
		oldplanex = values->data.planex;
		values->data.planex = values->data.planex * cos(-values->data.rotspeed)\
				- values->data.planey * sin(-values->data.rotspeed);
		values->data.planey = oldplanex * sin(-values->data.rotspeed)\
				+ values->data.planey * cos(-values->data.rotspeed);
	}
}

void	ft_rot_left(t_pars *values)
{
	double olddirx;
	double oldplanex;

	if (values->data.r_left)
	{
		olddirx = values->data.dirx;
		values->data.dirx = values->data.dirx * cos(values->data.rotspeed)\
				- values->data.diry * sin(values->data.rotspeed);
		values->data.diry = olddirx * sin(values->data.rotspeed)\
				+ values->data.diry * cos(values->data.rotspeed);
		oldplanex = values->data.planex;
		values->data.planex = values->data.planex * cos(values->data.rotspeed)\
				- values->data.planey * sin(values->data.rotspeed);
		values->data.planey = oldplanex * sin(values->data.rotspeed)\
				+ values->data.planey * cos(values->data.rotspeed);
	}
}
